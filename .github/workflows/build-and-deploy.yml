name: Build and Deploy to Production

on:
  push:
    branches: [production]
  pull_request:
    branches: [production]

env:
  REGISTRY: ghcr.io
  FRONTEND_IMAGE_NAME: kunal-511/beatwave
  BACKEND_IMAGE_NAME: kunal-511/beatwave-backend

jobs:
  # Generate semantic version based on commit
  versioning:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      major: ${{ steps.version.outputs.major }}
      minor: ${{ steps.version.outputs.minor }}
      patch: ${{ steps.version.outputs.patch }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate version
        id: version
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          VERSION_NUM=${LATEST_TAG#v}
          
          # Split version into components
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION_NUM"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          COMMIT_MSG=$(git log -1 --pretty=%B)
          
          if [[ $COMMIT_MSG == *"BREAKING CHANGE"* ]] || [[ $COMMIT_MSG == *"major:"* ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ $COMMIT_MSG == *"feat:"* ]] || [[ $COMMIT_MSG == *"feature:"* ]] || [[ $COMMIT_MSG == *"minor:"* ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi
          
          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "New version: $NEW_VERSION"
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "major=$MAJOR" >> $GITHUB_OUTPUT
          echo "minor=$MINOR" >> $GITHUB_OUTPUT
          echo "patch=$PATCH" >> $GITHUB_OUTPUT

  # Build and push backend image
  build-backend:
    runs-on: ubuntu-latest
    needs: versioning
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.versioning.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=v${{ needs.versioning.outputs.major }}
            type=raw,value=v${{ needs.versioning.outputs.major }}.${{ needs.versioning.outputs.minor }}

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./backend/dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ needs.versioning.outputs.version }}

  # Build and push frontend image
  build-frontend:
    runs-on: ubuntu-latest
    needs: versioning
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.versioning.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=v${{ needs.versioning.outputs.major }}
            type=raw,value=v${{ needs.versioning.outputs.major }}.${{ needs.versioning.outputs.minor }}

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./frontend/dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ needs.versioning.outputs.version }}
            VITE_CLERK_PUBLISHABLE_KEY=${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }}

  # Update Kubernetes deployment files
  update-k8s-manifests:
    runs-on: ubuntu-latest
    needs: [versioning, build-backend, build-frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GHCR_TOKEN }}

      - name: Update Kubernetes manifests
        run: |
          VERSION=${{ needs.versioning.outputs.version }}
          
          # Update backend deployment
          sed -i "s|image: ghcr.io/kunal-511/beatwave-backend:.*|image: ghcr.io/kunal-511/beatwave-backend:$VERSION|g" k8s/backend-deployment.yml
          
          # Update frontend deployment
          sed -i "s|image: ghcr.io/kunal-511/beatwave:.*|image: ghcr.io/kunal-511/beatwave:$VERSION|g" k8s/frontend-deployment.yml
          
          echo "Updated manifests with version: $VERSION"
      - name: Validate Kubernetes manifests
        run: |
          kubectl apply --dry-run=client -f k8s/backend-deployment.yml
          kubectl apply --dry-run=client -f k8s/frontend-deployment.yml

      - name: Commit updated manifests
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add k8s/
          git diff --staged --quiet || git commit -m "chore: update K8s manifests to ${{ needs.versioning.outputs.version }} [skip ci]"
          git push

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend, versioning]
    if: github.event_name == 'push'
    permissions:
      security-events: write
    steps:
      - name: Run Trivy vulnerability scanner - Backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/kunal-511/beatwave-backend:${{ needs.versioning.outputs.version }}'
          format: 'sarif'
          output: 'backend-trivy-results.sarif'

      - name: Upload Trivy scan results - Backend
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'backend-trivy-results.sarif'
          category: 'backend-image'

      - name: Run Trivy vulnerability scanner - Frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/kunal-511/beatwave:${{ needs.versioning.outputs.version }}'
          format: 'sarif'
          output: 'frontend-trivy-results.sarif'

      - name: Upload Trivy scan results - Frontend
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'frontend-trivy-results.sarif'
          category: 'frontend-image'

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [versioning, build-backend, build-frontend]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/production'
    steps:
      - name: Notify deployment status
        run: |
          if [[ "${{ needs.build-backend.result }}" == "success" && "${{ needs.build-frontend.result }}" == "success" ]]; then
            echo "Successfully built and pushed BeatWave ${{ needs.versioning.outputs.version }}"
            echo "Frontend: ghcr.io/kunal-511/beatwave:${{ needs.versioning.outputs.version }}"
            echo "Backend: ghcr.io/kunal-511/beatwave-backend:${{ needs.versioning.outputs.version }}"
          else
            echo "Build failed for BeatWave ${{ needs.versioning.outputs.version }}"
            exit 1
          fi
